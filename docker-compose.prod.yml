version: '3.8'

services:
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://quantalert:${POSTGRES_PASSWORD}@postgres:5432/quantalert
      - DUCKDB_PATH=/app/data/market_data.duckdb
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}
      - SECRET_KEY=${SECRET_KEY}
      - OPENALGO_API_KEY=${OPENALGO_API_KEY}
      - UPSTOX_API_KEY=${UPSTOX_API_KEY}
      - DHAN_API_KEY=${DHAN_API_KEY}
    volumes:
      - ./data:/app/data
    depends_on:
      - postgres
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build: .
    environment:
      - DATABASE_URL=postgresql://quantalert:${POSTGRES_PASSWORD}@postgres:5432/quantalert
      - DUCKDB_PATH=/app/data/market_data.duckdb
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}
      - SECRET_KEY=${SECRET_KEY}
      - OPENALGO_API_KEY=${OPENALGO_API_KEY}
      - UPSTOX_API_KEY=${UPSTOX_API_KEY}
      - DHAN_API_KEY=${DHAN_API_KEY}
    volumes:
      - ./data:/app/data
    depends_on:
      - postgres
    restart: unless-stopped
    command: python -m app.worker
    deploy:
      replicas: 2

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=quantalert
      - POSTGRES_USER=quantalert
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantalert -d quantalert"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
